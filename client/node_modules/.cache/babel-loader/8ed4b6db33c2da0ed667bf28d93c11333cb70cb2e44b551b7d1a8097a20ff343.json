{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amat Hazbar\\\\Downloads\\\\Tasktracker-todoList-Enas\\\\client\\\\src\\\\components\\\\TickIcon.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TickIcon = ({\n  taskId\n}) => {\n  _s();\n  const [isCompleted, setIsCompleted] = useState(false);\n  useEffect(() => {\n    const savedStatus = localStorage.getItem(`taskStatus_${taskId}`);\n    if (savedStatus) {\n      setIsCompleted(JSON.parse(savedStatus)); // Set the status if it exists in localStorage\n    }\n  }, [taskId]); // Re-run if taskId changes\n\n  // Toggle completion status and save it to localStorage\n  const handleClick = () => {\n    const newStatus = !isCompleted;\n    setIsCompleted(newStatus); // Update the component state\n    localStorage.setItem(`taskStatus_${taskId}`, JSON.stringify(newStatus)); // Save to localStorage\n  };\n\n  // Set the color based on completion status (green if completed, red if not)\n  const iconColor = isCompleted ? 'rgb(141, 181, 145)' : 'rgb(255, 99, 71)'; // Green for completed, red for not completed\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"tick\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"25\",\n    height: \"25\",\n    viewBox: \"0 0 512 512\",\n    onClick: handleClick // Toggle completion status on click\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"ionicons-v5-e\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M448,256c0-106-86-192-192-192S64,150,64,256s86,192,192,192S448,362,448,256Z\",\n      fill: iconColor // Set the circle color based on task completion status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n      points: \"352 176 217.6 336 160 272\",\n      fill: \"none\",\n      stroke: iconColor // Set the checkmark color based on task completion status\n      ,\n      strokeWidth: \"30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TickIcon, \"SaNq15iri2kwmUpIV/5IZzxmPSw=\");\n_c = TickIcon;\nexport default TickIcon;\nvar _c;\n$RefreshReg$(_c, \"TickIcon\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TickIcon","taskId","_s","isCompleted","setIsCompleted","savedStatus","localStorage","getItem","JSON","parse","handleClick","newStatus","setItem","stringify","iconColor","className","xmlns","width","height","viewBox","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","d","fill","points","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/Amat Hazbar/Downloads/Tasktracker-todoList-Enas/client/src/components/TickIcon.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst TickIcon = ({ taskId }) => {\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  useEffect(() => {\n    const savedStatus = localStorage.getItem(`taskStatus_${taskId}`);\n    if (savedStatus) {\n      setIsCompleted(JSON.parse(savedStatus)); // Set the status if it exists in localStorage\n    }\n  }, [taskId]); // Re-run if taskId changes\n\n  // Toggle completion status and save it to localStorage\n  const handleClick = () => {\n    const newStatus = !isCompleted;\n    setIsCompleted(newStatus); // Update the component state\n    localStorage.setItem(`taskStatus_${taskId}`, JSON.stringify(newStatus)); // Save to localStorage\n  };\n\n  // Set the color based on completion status (green if completed, red if not)\n  const iconColor = isCompleted ? 'rgb(141, 181, 145)' : 'rgb(255, 99, 71)'; // Green for completed, red for not completed\n\n  return (\n    <svg\n      className=\"tick\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"25\"\n      height=\"25\"\n      viewBox=\"0 0 512 512\"\n      onClick={handleClick} // Toggle completion status on click\n    >\n      <title>ionicons-v5-e</title>\n      <path \n        d=\"M448,256c0-106-86-192-192-192S64,150,64,256s86,192,192,192S448,362,448,256Z\" \n        fill={iconColor} // Set the circle color based on task completion status\n      />\n      <polyline \n        points=\"352 176 217.6 336 160 272\" \n        fill=\"none\"\n        stroke={iconColor} // Set the checkmark color based on task completion status\n        strokeWidth=\"30\"\n      />\n    </svg>\n  );\n};\n\nexport default TickIcon;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAcN,MAAM,EAAE,CAAC;IAChE,IAAII,WAAW,EAAE;MACfD,cAAc,CAACI,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,SAAS,GAAG,CAACR,WAAW;IAC9BC,cAAc,CAACO,SAAS,CAAC,CAAC,CAAC;IAC3BL,YAAY,CAACM,OAAO,CAAC,cAAcX,MAAM,EAAE,EAAEO,IAAI,CAACK,SAAS,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3E,CAAC;;EAED;EACA,MAAMG,SAAS,GAAGX,WAAW,GAAG,oBAAoB,GAAG,kBAAkB,CAAC,CAAC;;EAE3E,oBACEJ,OAAA;IACEgB,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAC,4BAA4B;IAClCC,KAAK,EAAC,IAAI;IACVC,MAAM,EAAC,IAAI;IACXC,OAAO,EAAC,aAAa;IACrBC,OAAO,EAAEV,WAAY,CAAC;IAAA;IAAAW,QAAA,gBAEtBtB,OAAA;MAAAsB,QAAA,EAAO;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC5B1B,OAAA;MACE2B,CAAC,EAAC,6EAA6E;MAC/EC,IAAI,EAAEb,SAAU,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACF1B,OAAA;MACE6B,MAAM,EAAC,2BAA2B;MAClCD,IAAI,EAAC,MAAM;MACXE,MAAM,EAAEf,SAAU,CAAC;MAAA;MACnBgB,WAAW,EAAC;IAAI;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvB,EAAA,CA1CIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA4Cd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}