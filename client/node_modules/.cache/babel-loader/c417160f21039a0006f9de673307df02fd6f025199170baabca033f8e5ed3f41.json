{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amat Hazbar\\\\Downloads\\\\Tasktracker-todoList-Enas\\\\client\\\\src\\\\components\\\\TickIcon.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TickIcon = ({\n  taskId\n}) => {\n  _s();\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  // Check if the task is completed using the taskId stored in localStorage\n  useEffect(() => {\n    const savedState = localStorage.getItem(`task-${taskId}`);\n    if (savedState === 'completed') {\n      setIsCompleted(true);\n    }\n  }, [taskId]);\n  const handleClick = () => {\n    // Toggle completion state on click\n    setIsCompleted(prevState => {\n      const newState = !prevState;\n      localStorage.setItem(`task-${taskId}`, newState ? 'completed' : 'incomplete');\n      return newState;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    style: {\n      width: '25px',\n      height: '25px',\n      borderRadius: '50%',\n      // Make it a circle\n      backgroundColor: isCompleted ? 'green' : 'transparent',\n      // Green if completed\n      border: '2px solid green',\n      cursor: 'pointer'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TickIcon, \"SaNq15iri2kwmUpIV/5IZzxmPSw=\");\n_c = TickIcon;\nexport default TickIcon;\nvar _c;\n$RefreshReg$(_c, \"TickIcon\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TickIcon","taskId","_s","isCompleted","setIsCompleted","savedState","localStorage","getItem","handleClick","prevState","newState","setItem","onClick","style","width","height","borderRadius","backgroundColor","border","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Amat Hazbar/Downloads/Tasktracker-todoList-Enas/client/src/components/TickIcon.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst TickIcon = ({ taskId }) => {\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  // Check if the task is completed using the taskId stored in localStorage\n  useEffect(() => {\n    const savedState = localStorage.getItem(`task-${taskId}`);\n    if (savedState === 'completed') {\n      setIsCompleted(true);\n    }\n  }, [taskId]);\n\n  const handleClick = () => {\n    // Toggle completion state on click\n    setIsCompleted(prevState => {\n      const newState = !prevState;\n      localStorage.setItem(`task-${taskId}`, newState ? 'completed' : 'incomplete');\n      return newState;\n    });\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      style={{\n        width: '25px',\n        height: '25px',\n        borderRadius: '50%', // Make it a circle\n        backgroundColor: isCompleted ? 'green' : 'transparent', // Green if completed\n        border: '2px solid green',\n        cursor: 'pointer',\n      }}\n    ></div>\n  );\n};\n\nexport default TickIcon;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQN,MAAM,EAAE,CAAC;IACzD,IAAII,UAAU,KAAK,WAAW,EAAE;MAC9BD,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAJ,cAAc,CAACK,SAAS,IAAI;MAC1B,MAAMC,QAAQ,GAAG,CAACD,SAAS;MAC3BH,YAAY,CAACK,OAAO,CAAC,QAAQV,MAAM,EAAE,EAAES,QAAQ,GAAG,WAAW,GAAG,YAAY,CAAC;MAC7E,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEX,OAAA;IACEa,OAAO,EAAEJ,WAAY;IACrBK,KAAK,EAAE;MACLC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,KAAK;MAAE;MACrBC,eAAe,EAAEd,WAAW,GAAG,OAAO,GAAG,aAAa;MAAE;MACxDe,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAE;IACV;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACrB,EAAA,CAjCIF,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}