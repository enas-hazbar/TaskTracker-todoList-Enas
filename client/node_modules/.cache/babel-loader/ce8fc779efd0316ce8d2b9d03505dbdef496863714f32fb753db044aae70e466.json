{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amat Hazbar\\\\Downloads\\\\Tasktracker-todoList-Enas\\\\client\\\\src\\\\components\\\\TickIcon.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TickIcon = () => {\n  _s();\n  // Get the stored completion status from localStorage (default to false if not found)\n  const [isCompleted, setIsCompleted] = useState(JSON.parse(localStorage.getItem('taskStatus')) || false);\n\n  // Function to handle click event and toggle the completion status\n  const handleClick = () => {\n    const newStatus = !isCompleted; // Toggle the status\n    setIsCompleted(newStatus); // Update the local state\n\n    // Save the new completion status in localStorage\n    localStorage.setItem('taskStatus', JSON.stringify(newStatus));\n  };\n\n  // Set the color based on the completion status\n  const iconColor = isCompleted ? 'rgb(141, 181, 145)' : 'rgb(255, 99, 71)'; // Green if completed, Red if not\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"tick\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"25\",\n    height: \"25\",\n    viewBox: \"0 0 512 512\",\n    onClick: handleClick // Add the click handler\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"ionicons-v5-e\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M448,256c0-106-86-192-192-192S64,150,64,256s86,192,192,192S448,362,448,256Z\",\n      fill: iconColor // Set the fill color of the circle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n      points: \"352 176 217.6 336 160 272\",\n      fill: \"none\",\n      stroke: iconColor // Set the stroke (checkmark) color\n      ,\n      strokeWidth: \"30\" // Make the checkmark line thicker\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(TickIcon, \"wDKoFIrDlabYoljaTtzi5n/Pr3s=\");\n_c = TickIcon;\nexport default TickIcon;\nvar _c;\n$RefreshReg$(_c, \"TickIcon\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TickIcon","_s","isCompleted","setIsCompleted","JSON","parse","localStorage","getItem","handleClick","newStatus","setItem","stringify","iconColor","className","xmlns","width","height","viewBox","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","d","fill","points","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/Amat Hazbar/Downloads/Tasktracker-todoList-Enas/client/src/components/TickIcon.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst TickIcon = () => {\n  // Get the stored completion status from localStorage (default to false if not found)\n  const [isCompleted, setIsCompleted] = useState(\n    JSON.parse(localStorage.getItem('taskStatus')) || false\n  );\n\n  // Function to handle click event and toggle the completion status\n  const handleClick = () => {\n    const newStatus = !isCompleted; // Toggle the status\n    setIsCompleted(newStatus); // Update the local state\n\n    // Save the new completion status in localStorage\n    localStorage.setItem('taskStatus', JSON.stringify(newStatus));\n  };\n\n  // Set the color based on the completion status\n  const iconColor = isCompleted ? 'rgb(141, 181, 145)' : 'rgb(255, 99, 71)'; // Green if completed, Red if not\n\n  return (\n    <svg\n      className=\"tick\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"25\"\n      height=\"25\"\n      viewBox=\"0 0 512 512\"\n      onClick={handleClick} // Add the click handler\n    >\n      <title>ionicons-v5-e</title>\n      <path \n        d=\"M448,256c0-106-86-192-192-192S64,150,64,256s86,192,192,192S448,362,448,256Z\" \n        fill={iconColor} // Set the fill color of the circle\n      />\n      <polyline \n        points=\"352 176 217.6 336 160 272\" \n        fill=\"none\"\n        stroke={iconColor} // Set the stroke (checkmark) color\n        strokeWidth=\"30\" // Make the checkmark line thicker\n      />\n    </svg>\n  );\n};\n\nexport default TickIcon;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAC5CQ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,KACpD,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,SAAS,GAAG,CAACP,WAAW,CAAC,CAAC;IAChCC,cAAc,CAACM,SAAS,CAAC,CAAC,CAAC;;IAE3B;IACAH,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEN,IAAI,CAACO,SAAS,CAACF,SAAS,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA,MAAMG,SAAS,GAAGV,WAAW,GAAG,oBAAoB,GAAG,kBAAkB,CAAC,CAAC;;EAE3E,oBACEH,OAAA;IACEc,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAC,4BAA4B;IAClCC,KAAK,EAAC,IAAI;IACVC,MAAM,EAAC,IAAI;IACXC,OAAO,EAAC,aAAa;IACrBC,OAAO,EAAEV,WAAY,CAAC;IAAA;IAAAW,QAAA,gBAEtBpB,OAAA;MAAAoB,QAAA,EAAO;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC5BxB,OAAA;MACEyB,CAAC,EAAC,6EAA6E;MAC/EC,IAAI,EAAEb,SAAU,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACFxB,OAAA;MACE2B,MAAM,EAAC,2BAA2B;MAClCD,IAAI,EAAC,MAAM;MACXE,MAAM,EAAEf,SAAU,CAAC;MAAA;MACnBgB,WAAW,EAAC,IAAI,CAAC;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAxCID,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}